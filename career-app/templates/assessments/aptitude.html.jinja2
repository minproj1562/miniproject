{% extends "base.html" %}

{% block content %}
<div class="assessment-container">
    <!-- Progress Bar -->
    <div class="progress-container">
        <div class="progress-bar" style="width: {{ (completed_questions / total_questions) * 100 }}%"></div>
    </div>

    <!-- Timer -->
    <div class="timer-alert" id="timer">
        <i class="bi bi-clock"></i>
        Time Left: <span id="time-left">00:00</span>
    </div>

    <!-- Category Navigation -->
    <div class="category-nav mb-4">
        {% for category in ['Mathematics', 'Logical Reasoning', 'Verbal Ability'] %}
        <button class="category-btn {% if current_category == category %}active{% endif %}" 
                data-category="{{ category }}">
            {{ category }}
        </button>
        {% endfor %}
    </div>

    <!-- Questions Container -->
    <div class="questions-wrapper">
        {% for category, levels in questions.items() %}
        <div class="category-section {% if current_category != category %}d-none{% endif %}" 
             id="category-{{ category }}">
            <h2 class="category-title">{{ category }}</h2>
            
            <div class="questions-grid">
                {% for level, question_list in levels.items() %}
                <div class="difficulty-level">
                    <h3 class="difficulty-title">{{ level|title }}</h3>
                    
                    {% for question in question_list %}
                    <div class="question-card">
                        <div class="question-header">
                            <span class="badge category-badge">{{ category }}</span>
                            <span class="time-limit">⏱ {{ question.time_limit }}s</span>
                        </div>
                        
                        <h3 class="question-text">{{ question.text }}</h3>
                        
                        <div class="options-grid">
                            {% for option in question.options %}
                            <div class="option-card" 
                                 data-question-id="{{ question.id }}"
                                 data-correct="{% if loop.index0 == question.correct %}true{% else %}false{% endif %}">
                                <span class="option-text">{{ option }}</span>
                            </div>
                            {% endfor %}
                        </div>
                    </div>
                    {% endfor %}
                </div>
                {% endfor %}
            </div>
        </div>
        {% endfor %}
    </div>

    <!-- Controls -->
    <div class="assessment-controls">
        <button class="nav-btn prev-category">← Previous Section</button>
        <button class="submit-btn">Submit Assessment</button>
        <button class="nav-btn next-category">Next Section →</button>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', () => {
    const timerElement = document.getElementById('time-left');
    let timeLeft = {{ initial_time }};
    
    // Timer functionality
    const timerInterval = setInterval(() => {
        timeLeft--;
        const minutes = Math.floor(timeLeft / 60);
        const seconds = timeLeft % 60;
        timerElement.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
        
        if(timeLeft <= 0) {
            clearInterval(timerInterval);
            submitAssessment();
        }
    }, 1000);

    // Question interaction
    document.querySelectorAll('.option-card').forEach(option => {
        option.addEventListener('click', function() {
            // Remove previous selections for this question
            const questionId = this.dataset.questionId;
            document.querySelectorAll(`[data-question-id="${questionId}"]`)
                .forEach(opt => opt.classList.remove('selected'));
            
            // Add visual feedback
            this.classList.add('selected');
        });
    });

    // Category navigation
    let currentCategoryIndex = 0;
    const categories = Array.from(document.querySelectorAll('.category-section'));
    
    document.querySelector('.next-category').addEventListener('click', () => {
        if(currentCategoryIndex < categories.length - 1) {
            categories[currentCategoryIndex].classList.add('d-none');
            currentCategoryIndex++;
            categories[currentCategoryIndex].classList.remove('d-none');
        }
    });
    
    document.querySelector('.prev-category').addEventListener('click', () => {
        if(currentCategoryIndex > 0) {
            categories[currentCategoryIndex].classList.add('d-none');
            currentCategoryIndex--;
            categories[currentCategoryIndex].classList.remove('d-none');
        }
    });

    // Submit handler
    async function submitAssessment() {
        const responses = [];
        
        document.querySelectorAll('.option-card.selected').forEach(option => {
            responses.push({
                questionId: option.dataset.questionId,
                answer: option.querySelector('.option-text').textContent,
                isCorrect: option.dataset.correct === 'true'
            });
        });

        try {
            const response = await fetch("{{ url_for('submit_assessment') }}", {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    type: 'aptitude',
                    responses: responses,
                    time_spent: {{ initial_time }} - timeLeft
                })
            });

            if(response.ok) {
                window.location.href = "{{ url_for('career_test_results') }}";
            }
        } catch (error) {
            console.error('Submission error:', error);
        }
    }

    document.querySelector('.submit-btn').addEventListener('click', submitAssessment);
});
</script>

<style>
.category-nav {
    display: flex;
    gap: 1rem;
    justify-content: center;
    margin-bottom: 2rem;
}

.category-btn {
    padding: 0.8rem 1.5rem;
    border-radius: 2rem;
    border: 2px solid var(--primary);
    background: transparent;
    color: var(--primary);
    transition: all 0.3s ease;
}

.category-btn.active {
    background: var(--primary);
    color: white;
}

.category-title {
    color: var(--secondary);
    margin-bottom: 2rem;
    text-align: center;
}

.difficulty-level {
    margin-bottom: 2.5rem;
}

.difficulty-title {
    color: var(--accent);
    border-bottom: 2px solid var(--accent);
    padding-bottom: 0.5rem;
    margin-bottom: 1.5rem;
}

.question-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
}

.time-limit {
    background: var(--danger);
    color: white;
    padding: 0.3rem 0.8rem;
    border-radius: 1rem;
    font-size: 0.9rem;
}

.questions-grid {
    display: grid;
    gap: 1.5rem;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
}

.assessment-controls {
    display: flex;
    justify-content: space-between;
    margin-top: 2rem;
}

.option-card.selected {
    border-color: var(--success);
    background: linear-gradient(
        45deg,
        rgba(16, 185, 129, 0.1) 0%,
        rgba(16, 185, 129, 0.05) 100%
    );
}
</style>
{% endblock %}