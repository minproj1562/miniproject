{% extends "base.html" %}
{% block title %}Career Aptitude Assessment{% endblock %}

{% block content %}
    <style>
        body {
            font-family: 'Poppins', sans-serif;
            background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
            color: #fff;
            margin: 0;
            padding: 0;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }
        .assessment-container {
            max-width: 900px;
            margin: 4rem auto;
            padding: 2rem;
        }
        .progress-container {
            background: rgba(255, 255, 255, 0.2);
            border-radius: 10px;
            height: 20px;
            margin-bottom: 1.5rem;
        }
        .progress-bar {
            background: #2a5298;
            height: 100%;
            border-radius: 10px;
            transition: width 0.3s ease;
        }
        .timer-alert {
            text-align: center;
            font-size: 1.2rem;
            margin-bottom: 1rem;
            color: #fff;
        }
        .question-counter {
            text-align: center;
            font-size: 1.1rem;
            margin-bottom: 2rem;
            color: #fff;
        }
        .category-nav {
            display: flex;
            gap: 1rem;
            justify-content: center;
            margin-bottom: 2rem;
        }
        .category-btn {
            padding: 0.8rem 1.5rem;
            border-radius: 20px;
            border: 2px solid #2a5298;
            background: transparent;
            color: #fff;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        .category-btn.active {
            background: #2a5298;
            color: #fff;
        }
        .category-section {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            padding: 2rem;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }
        .category-title {
            font-size: 2rem;
            font-weight: 700;
            color: #1e3c72;
            text-align: center;
            margin-bottom: 1.5rem;
        }
        .difficulty-title {
            font-size: 1.5rem;
            color: #2a5298;
            border-bottom: 2px solid #2a5298;
            padding-bottom: 0.5rem;
            margin-bottom: 1.5rem;
        }
        .question-card {
            background: #fff;
            border-radius: 10px;
            padding: 1.5rem;
            margin-bottom: 1.5rem;
            box-shadow: 0 3px 10px rgba(0, 0, 0, 0.05);
            transition: transform 0.3s ease;
        }
        .question-card:hover {
            transform: translateY(-5px);
        }
        .question-header {
            display: flex;
            justify-content: space-between;
            margin-bottom: 1rem;
        }
        .category-badge {
            background: #2a5298;
            color: #fff;
            padding: 0.3rem 0.8rem;
            border-radius: 10px;
        }
        .time-limit {
            background: #dc3545;
            color: #fff;
            padding: 0.3rem 0.8rem;
            border-radius: 10px;
        }
        .question-text {
            font-size: 1.2rem;
            color: #333;
            margin-bottom: 1rem;
        }
        .options-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 1rem;
        }
        .option-card {
            background: #f8f9fa;
            padding: 1rem;
            border-radius: 10px;
            cursor: pointer;
            transition: all 0.3s ease;
            color: #333;
        }
        .option-card:hover {
            background: #e9ecef;
        }
        .option-card.selected {
            background: #d4edda;
            border: 2px solid #28a745;
        }
        .assessment-controls {
            display: flex;
            justify-content: space-between;
            margin-top: 2rem;
        }
        .nav-btn, .submit-btn {
            padding: 0.75rem 1.5rem;
            font-size: 1.1rem;
            border-radius: 20px;
            border: none;
            background: #2a5298;
            color: #fff;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        .nav-btn:hover, .submit-btn:hover {
            background: #1e3c72;
            transform: translateY(-3px);
        }
        .d-none {
            display: none;
        }
    </style>

    <div class="assessment-container">
        <!-- Progress Bar -->
        <div class="progress-container">
            <div class="progress-bar" style="width: 0%"></div>
        </div>

        <!-- Timer -->
        <div class="timer-alert" id="timer">
            <i class="bi bi-clock"></i>
            Time Left: <span id="time-left">00:00</span>
        </div>

        <!-- Question Counter -->
        <div class="question-counter" id="question-counter">
            Questions Answered: <span id="answered-count">0</span> / {{ total_questions }}
        </div>

        <!-- Category Navigation -->
        <div class="category-nav mb-4">
            {% for category in categories %}
            <button class="category-btn {% if loop.first %}active{% endif %}" 
                    data-category="{{ category }}">
                {{ category }}
            </button>
            {% endfor %}
        </div>

        <!-- Questions Container -->
        <div class="questions-wrapper">
            {% for category, levels in questions.items() %}
            <div class="category-section {% if not loop.first %}d-none{% endif %}" 
                 id="category-{{ category }}">
                <h2 class="category-title">{{ category }}</h2>
                
                <div class="questions-grid">
                    {% for level, question_list in levels.items() %}
                    <div class="difficulty-level">
                        <h3 class="difficulty-title">{{ level|title }}</h3>
                        
                        {% for question in question_list %}
                        <div class="question-card" data-question-id="{{ question.id }}">
                            <div class="question-header">
                                <span class="category-badge">{{ category }}</span>
                                <span class="time-limit">⏱ {{ question.time_limit }}s</span>
                            </div>
                            
                            <h3 class="question-text">{{ question.text }}</h3>
                            
                            <div class="options-grid">
                                {% for option in question.options %}
                                <div class="option-card" 
                                     data-question-id="{{ question.id }}"
                                     data-option-index="{{ loop.index0 }}">
                                    {{ option }}
                                </div>
                                {% endfor %}
                            </div>
                        </div>
                        {% endfor %}
                    </div>
                    {% endfor %}
                </div>
            </div>
            {% endfor %}
        </div>

        <!-- Controls -->
        <div class="assessment-controls">
            <button class="nav-btn prev-category">← Previous Section</button>
            <button class="submit-btn">Submit Assessment</button>
            <button class="nav-btn next-category">Next Section →</button>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const timerElement = document.getElementById('time-left');
            const answeredCountElement = document.getElementById('answered-count');
            const progressBar = document.querySelector('.progress-bar');
            let timeLeft = {{ initial_time }};
            let answeredCount = 0;
            const totalQuestions = {{ total_questions }};

            // Timer logic
            const timerInterval = setInterval(() => {
                timeLeft--;
                const minutes = Math.floor(timeLeft / 60);
                const seconds = timeLeft % 60;
                timerElement.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
                
                if (timeLeft <= 0) {
                    clearInterval(timerInterval);
                    submitAssessment();
                }
            }, 1000);

            // Option selection
            document.querySelectorAll('.option-card').forEach(option => {
                option.addEventListener('click', function() {
                    const questionId = this.dataset.questionId;
                    const alreadyAnswered = document.querySelector(`.option-card[data-question-id="${questionId}"].selected`);
                    if (!alreadyAnswered) {
                        answeredCount++;
                        answeredCountElement.textContent = answeredCount;
                        progressBar.style.width = `${(answeredCount / totalQuestions) * 100}%`;
                    }
                    document.querySelectorAll(`.option-card[data-question-id="${questionId}"]`)
                        .forEach(opt => opt.classList.remove('selected'));
                    this.classList.add('selected');
                });
            });

            // Category navigation
            let currentCategoryIndex = 0;
            const categories = Array.from(document.querySelectorAll('.category-section'));
            
            document.querySelector('.next-category').addEventListener('click', () => {
                if (currentCategoryIndex < categories.length - 1) {
                    categories[currentCategoryIndex].classList.add('d-none');
                    currentCategoryIndex++;
                    categories[currentCategoryIndex].classList.remove('d-none');
                }
            });
            
            document.querySelector('.prev-category').addEventListener('click', () => {
                if (currentCategoryIndex > 0) {
                    categories[currentCategoryIndex].classList.add('d-none');
                    currentCategoryIndex--;
                    categories[currentCategoryIndex].classList.remove('d-none');
                }
            });

            // Submission logic
            async function submitAssessment() {
                const responses = [];
                
                document.querySelectorAll('.option-card.selected').forEach(option => {
                    const questionId = option.dataset.questionId;
                    const optionIndex = option.dataset.optionIndex;
                    responses.push({
                        id: questionId,
                        selected: parseInt(optionIndex)
                    });
                });

                try {
                    const response = await fetch("{{ url_for('submit_assessment') }}", {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            type: 'aptitude',
                            responses: responses,
                            time_spent: {{ initial_time }} - timeLeft
                        })
                    });

                    if (response.ok) {
                        window.location.href = "{{ url_for('career_test_results') }}";
                    } else {
                        console.error('Submission failed:', response.statusText);
                    }
                } catch (error) {
                    console.error('Submission error:', error);
                }
            }

            document.querySelector('.submit-btn').addEventListener('click', submitAssessment);
        });
    </script>
{% endblock %}